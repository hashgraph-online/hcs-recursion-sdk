!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";const t={config:{cdnUrl:"https://tier.bot/api/hashinals-cdn/",network:"mainnet",retryAttempts:3,retryBackoff:300,debug:!1,showLoadingIndicator:!1,loadingCallbackName:null},configMapping:{hcsCdnUrl:"cdnUrl",hcsNetwork:"network",hcsRetryAttempts:"retryAttempts",hcsRetryBackoff:"retryBackoff",hcsDebug:"debug",hcsShowLoadingIndicator:"showLoadingIndicator",hcsLoadingCallbackName:"loadingCallbackName"},LoadedScripts:{},LoadedWasm:null,LoadedImages:{},scriptLoadedEvent:new Event("HCSScriptLoaded"),loadQueue:[],isProcessingQueue:!1,log(...t){this.config.debug&&console.log("[HCS SDK]",...t)},error(...t){console.error("[HCS SDK]",...t)},loadConfigFromHTML(){const t=document.querySelector("script[data-hcs-config]");t&&Object.keys(this.configMapping).forEach((e=>{if(e in t.dataset){const i=this.configMapping[e];let a=t.dataset[e];"true"===a&&(a=!0),"false"===a&&(a=!1),isNaN(a)||""===a||(a=Number(a)),this.config[i]=a}})),this.log("Loaded config:",this.config)},updateLoadingStatus(t,e){this.config.showLoadingIndicator&&console.log(`[HCS Loading] ${t}: ${e}`),this.config.loadingCallbackName&&"function"==typeof window[this.config.loadingCallbackName]&&window[this.config.loadingCallbackName](t,e)},async fetchWithRetry(t,e=this.config.retryAttempts,i=this.config.retryBackoff){try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return e}catch(a){if(e>0)return this.log(`Retrying fetch for ${t}. Attempts left: ${e-1}`),await new Promise((t=>setTimeout(t,i))),this.fetchWithRetry(t,e-1,2*i);throw a}},async loadScript(t){const e=t.getAttribute("data-src"),i=t.getAttribute("data-script-id"),a=e.split("/").pop(),o=t.getAttribute("type"),s=t.hasAttribute("data-required");this.updateLoadingStatus(i,"loading");try{const e=t.getAttribute("data-cdn-url")||this.config.cdnUrl,s=t.getAttribute("data-network")||this.config.network,n=await this.fetchWithRetry(`${e}${a}?network=${s}`);if("css"===o){const t=await n.text(),e=document.createElement("style");e.textContent=t,document.head.appendChild(e)}else if("wasm"===o){const e=await n.arrayBuffer(),i=await WebAssembly.compile(e);this.LoadedWasm=await WebAssembly.instantiate(i,{env:{},...t.dataset})}else{const t=await n.text(),e=document.createElement("script");e.textContent=t,document.body.appendChild(e)}this.LoadedScripts[i]=!0,this.updateLoadingStatus(i,"loaded"),window.dispatchEvent(this.scriptLoadedEvent),this.log(`Loaded script: ${i}`)}catch(n){if(this.error(`Failed to load ${o||"script"}: ${i}`,n),this.updateLoadingStatus(i,"failed"),s)throw n}},async loadImage(t){const e=t.getAttribute("data-src").split("/").pop();this.log(`Loading image: ${e}`),this.updateLoadingStatus(`Image: ${e}`,"loading");try{const i=t.getAttribute("data-cdn-url")||this.config.cdnUrl,a=t.getAttribute("data-network")||this.config.network,o=await this.fetchWithRetry(`${i}${e}?network=${a}`),s=await o.blob(),n=URL.createObjectURL(s);t.src=n,this.LoadedImages[e]=n,this.updateLoadingStatus(`Image: ${e}`,"loaded"),this.log(`Loaded image: ${e}`)}catch(i){this.error(`Failed to load image: ${e}`,i),this.updateLoadingStatus(`Image: ${e}`,"failed")}},async processQueue(){if(!this.isProcessingQueue){for(this.isProcessingQueue=!0;this.loadQueue.length>0;){const e=this.loadQueue.shift();try{"script"===e.type?await this.loadScript(e.element):"image"===e.type&&await this.loadImage(e.element)}catch(t){if(this.error("Error processing queue item:",t),"script"===e.type&&e.element.hasAttribute("data-required"))break}}this.isProcessingQueue=!1}},queueLoading(t,e){t.forEach((t=>{const i=parseInt(t.getAttribute("data-load-order")||"")||1/0;this.loadQueue.push({element:t,type:e,order:i})})),this.loadQueue.sort(((t,e)=>t.order-e.order)),this.processQueue()},init(){return this.loadConfigFromHTML(),new Promise((t=>{const e=document.querySelectorAll('script[data-src^="hcs://"]'),i=document.querySelectorAll('img[data-src^="hcs://"]');this.queueLoading(e,"script"),this.queueLoading(i,"image");new MutationObserver((t=>{t.forEach((t=>{t.addedNodes.forEach((t=>{t.nodeType===Node.ELEMENT_NODE&&(t.matches('script[data-src^="hcs://"]')?this.queueLoading([t],"script"):t.matches('img[data-src^="hcs://"]')&&this.queueLoading([t],"image"))}))}))})).observe(document.body,{childList:!0,subtree:!0});const a=()=>{0===this.loadQueue.length?t():requestAnimationFrame(a)};a()}))}};window.HCS=t.init().then((()=>{console.log("All HCS resources loaded"),"function"==typeof window.HCSReady&&window.HCSReady()}))}));
